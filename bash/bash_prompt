#!/bin/bash

# Check that terminfo exists before changing TERM var to xterm-256color
# Prevents prompt flashing in Mac OS X 10.6 Terminal.app
if [ -e /usr/share/terminfo/x/xterm-256color ]; then
  export TERM='xterm-256color'
fi

git_prompt() {
  local s=""
  local branch_name=""

  # check if the current directory is in a git repository
  if [ "$(git rev-parse --is-inside-work-tree &>/dev/null; printf "%s" $?)" == 0 ]; then

    # check if the current directory is in .git before running git checks
    if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == "false" ]; then

      # ensure index is up to date
      git update-index --really-refresh  -q &>/dev/null

      # check for uncommitted changes in the index
      if ! git diff --quiet --ignore-submodules --cached; then
        s="$s+";
      fi

      # check for unstaged changes
      if ! git diff-files --quiet --ignore-submodules --; then
        s="$s!";
      fi

      # check for untracked files
      if [ -n "$(git ls-files --others --exclude-standard)" ]; then
        s="$s?";
      fi

      # check for stashed files
      if git rev-parse --verify refs/stash &>/dev/null; then
        s="$s$";
      fi
    fi

    # get the short symbolic ref
    # if HEAD isn't a symbolic ref, get the short SHA
    # otherwise, just give up
    branch_name="$(\
      git symbolic-ref --quiet --short HEAD 2> /dev/null || \
      git rev-parse --short HEAD 2> /dev/null || \
      printf "(unknown)" \
    )"

    [ -n "$s" ] && s=" [$s]"

    printf "%s" "$1$branch_name$s"
  else
    return
  fi
}

set_prompt() {
  local user_style host_style

  # logged in as root
  if [[ "$USER" == "root" ]]; then
    user_style="\[$COL_BOLD$SOL_RED\]"
  else
    user_style="\[$SOL_ORANGE\]"
  fi

  # connected via ssh
  if [[ "$SSH_TTY" ]]; then
    host_style="\[$COL_BOLD$SOL_RED\]"
  else
    host_style="\[$SOL_YELLOW\]"
  fi

  # set the terminal title to the current working directory
  PS1="\[\033]0;\w\007\]"

  PS1+="\n" # newline
  PS1+="\[$user_style\]\u" # username
  PS1+="\[$COL_RESET$SOL_WHITE\]@"
  PS1+="\[$host_style\]\h" # host
  PS1+="\[$COL_RESET$SOL_WHITE\]: "
  PS1+="\[$SOL_GREEN\]\w" # working directory
  PS1+="\$(git_prompt \"$SOL_WHITE on $SOL_CYAN\")" # git repository details
  PS1+="\n"
  PS1+="\[$COL_RESET$SOL_WHITE\]\$ \[$COL_RESET\]" # $ (and reset color)

  export PS1
}

set_prompt

unset set_prompt
