#!/bin/bash

DOTFILES_DIRECTORY="${HOME}/.dotfiles"
DOTFILES_TARBALL_PATH="https://github.com/snusnu/dotfiles/tarball/master"
DOTFILES_GIT_REMOTE="https://github.com/snusnu/dotfiles"
GIT_TOOLS_GIT_REMOTE="https://github.com/dkubb/git-tools"
GIT_TOOLS_DIRECTORY="${HOME}/code/git-tools"

# If missing, download and extract the dotfiles repository
if [[ ! -d ${DOTFILES_DIRECTORY} ]]; then
    printf "$(tput setaf 7)Downloading dotfiles...\033[m\n"
    mkdir ${DOTFILES_DIRECTORY}
    # Get the tarball
    curl -fsSLo ${HOME}/dotfiles.tar.gz ${DOTFILES_TARBALL_PATH}
    # Extract to the dotfiles directory
    tar -zxf ${HOME}/dotfiles.tar.gz --strip-components 1 -C ${DOTFILES_DIRECTORY}
    # Remove the tarball
    rm -rf ${HOME}/dotfiles.tar.gz
fi

cd ${DOTFILES_DIRECTORY}

source ./lib/help
source ./lib/utils
source ./lib/brew
source ./lib/ruby

# Help text
if [[ "$1" == "-h" || "$1" == "--help" ]]; then
    run_help
    exit
fi

# Test for known flags
for opt in $@
do
    case $opt in
        --no-packages) no_packages=true ;;
        --no-sync) no_sync=true ;;
        -*|--*) e_warning "Warning: invalid option $opt" ;;
    esac
done

# Before relying on Homebrew, check that packages can be compiled
if ! type_exists 'gcc'; then
    e_error "The XCode Command Line Tools must be installed first."
    printf "  Download them from: https://developer.apple.com/downloads\n"
    printf "  Then run: bash ~/.dotfiles/bin/dotfiles\n"
    exit 1
fi

# Check for Homebrew
if type_exists 'brew'; then
  e_header "Updating Homebrew..."
  brew update
  [[ $? ]] && e_success "Done"

  e_header "Updating any existing Homebrew formulae..."
  brew upgrade
  [[ $? ]] && e_success "Done"
else
    e_header "Installing Homebrew..."
    ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
fi

# Check for git
if ! type_exists 'git'; then
    e_header "Installing Git..."
    brew install git
fi

# Initialize the git repository if it's missing
if ! is_git_repo; then
    e_header "Initializing git repository..."
    git init
    git remote add origin ${DOTFILES_GIT_REMOTE}
    git fetch origin master
    # Reset the index and working tree to the fetched HEAD
    # (submodules are cloned in the subsequent sync step)
    git reset --hard FETCH_HEAD
    # Remove any untracked files
    git clean -fd
fi

# Conditionally sync with the remote repository
if [[ $no_sync ]]; then
    printf "Skipped dotfiles sync.\n"
else
    e_header "Syncing dotfiles..."

    # Pull down the latest changes
    git pull --rebase origin master
fi

if [[ ! -d ${GIT_TOOLS_DIRECTORY} ]]; then
    e_header "Cloning dkubb/git-tools"
    git clone ${GIT_TOOLS_GIT_REMOTE} ${GIT_TOOLS_DIRECTORY}

    e_header "Linking dkubb/git-tools scripts to /usr/local/bin"
    ln -fs ${GIT_TOOLS_DIRECTORY}/git-fix-branch /usr/local/bin/git-fix-branch
    ln -fs ${GIT_TOOLS_DIRECTORY}/git-prune-all /usr/local/bin/git-prune-all
    ln -fs ${GIT_TOOLS_DIRECTORY}/git-push-each /usr/local/bin/git-push-each
else
    e_header "Syncing dkubb/git-tools ..."
    cd $GIT_TOOLS_DIRECTORY
    git pull --rebase origin master
    cd -
fi

# Install and update packages
if [[ $no_packages ]]; then
    e_warning "Skipped package installations."
else
    e_header "Installing homebrew packages ..."
    run_brew
fi

# Force create/replace the symlink.
link() {
    ln -fs "${DOTFILES_DIRECTORY}/${1}" "${HOME}/${2}"
}

# Create the necessary symbolic links between the `.dotfiles` and `HOME`
# directory. The `bash_profile` sources other files directly from the
# `.dotfiles` repository.
link_dotfiles() {
    link "bash/bashrc"       ".bashrc"
    link "bash/bash_profile" ".bash_profile"
    link "bash/inputrc"      ".inputrc"
    link "bash/hushlogin"    ".hushlogin"
    link "git/gitattributes" ".gitattributes"
    link "git/gitignore"     ".gitignore"
    link "ackrc"             ".ackrc"
    link "aprc"              ".aprc"
    link "cvsignore"         ".cvsignore"
    link "gemrc"             ".gemrc"
    link "irbrc"             ".irbrc"
    link "pryrc"             ".pryrc"
    link "ruby-version"      ".ruby-version"
    link "tmux.conf"         ".tmux.conf"
    link "vimrc"             ".vimrc"
}

# Copy `.gitconfig`.
# Any global git commands in `~/.bash_profile.local` will be written to
# `.gitconfig`. This prevents them from being committed to the repository.
mirrorfiles() {
    rsync -avz --quiet ${DOTFILES_DIRECTORY}/git/gitconfig  ${HOME}/.gitconfig
    link_dotfiles
    e_success "Dotfiles update complete!"
}

# Ask before potentially overwriting files
seek_confirmation "Warning: This step may overwrite your existing dotfiles."

if is_confirmed; then
    mirrorfiles
    source ${HOME}/.bash_profile
else
    printf "Skipped syncing current dotfiles\n"
fi

# Must happen after dotfiles have been synced and sourced
e_header "Installing custom software ..."

printf "The sudo password is needed to add brewed bash to /etc/shells and enable htop ..."

sudo bash -c "echo \"/usr/local/bin/bash\" >> /etc/shells"

# Enable htop
sudo chown root:wheel /usr/local/Cellar/htop-osx/0.8.2.2/bin/htop
sudo chmod u+s /usr/local/Cellar/htop-osx/0.8.2.2/bin/htop

# Initialize postgres
initdb /usr/local/var/postgres -E utf8
ln -sfv /usr/local/opt/postgresql/*.plist ~/Library/LaunchAgents
launchctl load ~/Library/LaunchAgents/homebrew.mxcl.postgresql.plist

e_header "Bundling vim plugins ..."
vim +PluginInstall +qall

e_header "Updating python setuptools and pip ..."
pip install --upgrade setuptools
pip install --upgrade pip

e_header "Installing ipython ..."
pip install ipython[all]

e_header "Installing vagrant-vbguest plugin ..."
vagrant plugin install vagrant-vbguest

customize_ruby

# customize haskell

e_header "Updating cabal package list"
cabal update

e_header "Installing happy"
cabal install happy

e_header "Installing Idris"
cabal install idris

export PATH=~/.cabal/bin:$PATH

vim_haskell_path="$HOME/.vim/haskell"

mkdir -p $vim_haskell_path/bin
mkdir -p $vim_haskell_path/data

e_header "Installing git-hscope"
cp $DOTFILES_HOME/git/git-hscope $vim_haskell_path/bin

e_header "Checking dependencies for developing Haskell with ViM"
for i in ctags git ghc cabal make vim curl-config happy; do
  command -v $i >/dev/null
  if [ $? -ne 0 ] ; then
    e_warning "Installer requires ${i}. Please install $i and try again."
    exit 1
  fi
done

e_header "Building vimproc.vim"
make -C ~/.vim/bundle/vimproc.vim

function build_shared_binary {
  pkg=$1
  constraint=$2

  if [ -e $vim_haskell_path/bin/$pkg ]
  then
    e_header "$pkg is already installed, skipping build"
    return
  fi

  dir=`mktemp -d /${TMPDIR:-/tmp}/build-XXXX`

  e_header "Building $pkg (in $dir)"
  cd $dir
  cabal sandbox init
  cabal install -j --reorder-goals --disable-documentation --datadir=$vim_haskell_path/data --force-reinstalls "${constraint:-$pkg}"

  e_header "Saving $pkg binaries"
  cp .cabal-sandbox/bin/* $vim_haskell_path/bin

  e_header "Cleaning up"
  cd -
  rm -fr $dir
}

e_header "Building shared binaries for Haskell development with ViM"
build_shared_binary "ghc-mod", "ghc-mod >= 4 && < 5"
build_shared_binary "hasktags"
build_shared_binary "codex"
build_shared_binary "hscope"
build_shared_binary "pointfree"
build_shared_binary "pointful"
build_shared_binary "hoogle"
build_shared_binary "stylish-haskell"


e_header "Building Hoogle database..."
$vim_haskell_path/bin/hoogle data

e_header "Configuring codex to search in sandboxes..."
cat > $HOME/.codex <<EOF
hackagePath: .cabal-sandbox/packages/
tagsFileHeader: false
tagsFileSorted: false
tagsCmd: hasktags --extendedctag --ignore-close-implementation --ctags --tags-absolute --output='\$TAGS' '\$SOURCES'
EOF

# Ask before potentially overwriting OS X defaults
seek_confirmation "Warning: This step may modify your OS X system defaults."

if is_confirmed; then
    bash $DOTFILES_DIRECTORY/bin/osxprops
    e_success "OS X settings updated! You may need to restart."
else
    printf "Skipped OS X settings update.\n"
fi
